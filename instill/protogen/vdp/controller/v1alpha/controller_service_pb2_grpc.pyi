"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import grpc
import grpc.aio
import typing
import vdp.controller.v1alpha.controller_pb2

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ControllerPrivateServiceStub:
    """Controller service responds to incoming controller requests"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Liveness: grpc.UnaryUnaryMultiCallable[
        vdp.controller.v1alpha.controller_pb2.LivenessRequest,
        vdp.controller.v1alpha.controller_pb2.LivenessResponse,
    ]
    """Liveness method receives a LivenessRequest message and returns a
    LivenessResponse message.
    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """
    Readiness: grpc.UnaryUnaryMultiCallable[
        vdp.controller.v1alpha.controller_pb2.ReadinessRequest,
        vdp.controller.v1alpha.controller_pb2.ReadinessResponse,
    ]
    """Readiness method receives a ReadinessRequest message and returns a
    ReadinessResponse message.
    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """
    GetResource: grpc.UnaryUnaryMultiCallable[
        vdp.controller.v1alpha.controller_pb2.GetResourceRequest,
        vdp.controller.v1alpha.controller_pb2.GetResourceResponse,
    ]
    """GetResource method receives a GetResourceRequest message
    and returns a GetResourceResponse
    """
    UpdateResource: grpc.UnaryUnaryMultiCallable[
        vdp.controller.v1alpha.controller_pb2.UpdateResourceRequest,
        vdp.controller.v1alpha.controller_pb2.UpdateResourceResponse,
    ]
    """UpdateResource method receives a UpdateResourceRequest message
    and returns a UpdateResourceResponse
    """
    DeleteResource: grpc.UnaryUnaryMultiCallable[
        vdp.controller.v1alpha.controller_pb2.DeleteResourceRequest,
        vdp.controller.v1alpha.controller_pb2.DeleteResourceResponse,
    ]
    """DeleteResource method receives a DeleteResourceRequest message
    and returns a DeleteResourceResponse
    """

class ControllerPrivateServiceAsyncStub:
    """Controller service responds to incoming controller requests"""

    Liveness: grpc.aio.UnaryUnaryMultiCallable[
        vdp.controller.v1alpha.controller_pb2.LivenessRequest,
        vdp.controller.v1alpha.controller_pb2.LivenessResponse,
    ]
    """Liveness method receives a LivenessRequest message and returns a
    LivenessResponse message.
    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """
    Readiness: grpc.aio.UnaryUnaryMultiCallable[
        vdp.controller.v1alpha.controller_pb2.ReadinessRequest,
        vdp.controller.v1alpha.controller_pb2.ReadinessResponse,
    ]
    """Readiness method receives a ReadinessRequest message and returns a
    ReadinessResponse message.
    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """
    GetResource: grpc.aio.UnaryUnaryMultiCallable[
        vdp.controller.v1alpha.controller_pb2.GetResourceRequest,
        vdp.controller.v1alpha.controller_pb2.GetResourceResponse,
    ]
    """GetResource method receives a GetResourceRequest message
    and returns a GetResourceResponse
    """
    UpdateResource: grpc.aio.UnaryUnaryMultiCallable[
        vdp.controller.v1alpha.controller_pb2.UpdateResourceRequest,
        vdp.controller.v1alpha.controller_pb2.UpdateResourceResponse,
    ]
    """UpdateResource method receives a UpdateResourceRequest message
    and returns a UpdateResourceResponse
    """
    DeleteResource: grpc.aio.UnaryUnaryMultiCallable[
        vdp.controller.v1alpha.controller_pb2.DeleteResourceRequest,
        vdp.controller.v1alpha.controller_pb2.DeleteResourceResponse,
    ]
    """DeleteResource method receives a DeleteResourceRequest message
    and returns a DeleteResourceResponse
    """

class ControllerPrivateServiceServicer(metaclass=abc.ABCMeta):
    """Controller service responds to incoming controller requests"""

    @abc.abstractmethod
    def Liveness(
        self,
        request: vdp.controller.v1alpha.controller_pb2.LivenessRequest,
        context: _ServicerContext,
    ) -> typing.Union[vdp.controller.v1alpha.controller_pb2.LivenessResponse, collections.abc.Awaitable[vdp.controller.v1alpha.controller_pb2.LivenessResponse]]:
        """Liveness method receives a LivenessRequest message and returns a
        LivenessResponse message.
        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
        """
    @abc.abstractmethod
    def Readiness(
        self,
        request: vdp.controller.v1alpha.controller_pb2.ReadinessRequest,
        context: _ServicerContext,
    ) -> typing.Union[vdp.controller.v1alpha.controller_pb2.ReadinessResponse, collections.abc.Awaitable[vdp.controller.v1alpha.controller_pb2.ReadinessResponse]]:
        """Readiness method receives a ReadinessRequest message and returns a
        ReadinessResponse message.
        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
        """
    @abc.abstractmethod
    def GetResource(
        self,
        request: vdp.controller.v1alpha.controller_pb2.GetResourceRequest,
        context: _ServicerContext,
    ) -> typing.Union[vdp.controller.v1alpha.controller_pb2.GetResourceResponse, collections.abc.Awaitable[vdp.controller.v1alpha.controller_pb2.GetResourceResponse]]:
        """GetResource method receives a GetResourceRequest message
        and returns a GetResourceResponse
        """
    @abc.abstractmethod
    def UpdateResource(
        self,
        request: vdp.controller.v1alpha.controller_pb2.UpdateResourceRequest,
        context: _ServicerContext,
    ) -> typing.Union[vdp.controller.v1alpha.controller_pb2.UpdateResourceResponse, collections.abc.Awaitable[vdp.controller.v1alpha.controller_pb2.UpdateResourceResponse]]:
        """UpdateResource method receives a UpdateResourceRequest message
        and returns a UpdateResourceResponse
        """
    @abc.abstractmethod
    def DeleteResource(
        self,
        request: vdp.controller.v1alpha.controller_pb2.DeleteResourceRequest,
        context: _ServicerContext,
    ) -> typing.Union[vdp.controller.v1alpha.controller_pb2.DeleteResourceResponse, collections.abc.Awaitable[vdp.controller.v1alpha.controller_pb2.DeleteResourceResponse]]:
        """DeleteResource method receives a DeleteResourceRequest message
        and returns a DeleteResourceResponse
        """

def add_ControllerPrivateServiceServicer_to_server(servicer: ControllerPrivateServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
