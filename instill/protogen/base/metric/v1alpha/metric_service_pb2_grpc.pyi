"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

This is the POC for metric-backend service that supports
1. receiving usage reports from pipeline-backend and model-backend clients
2. uploading usage to InfluxDB
3. uploading usage to Stripe
4. responding usage/price enquiries from clients
"""
import abc
import base.metric.v1alpha.metric_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class PipelineServiceStub:
    """Services related to pipeline trigger records
    Service for get pipeline information
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetPipelines: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetPipelinesRequest,
        base.metric.v1alpha.metric_pb2.GetPipelinesResponse,
    ]
    """Get pipeline info"""
    ReportPipelineTrigger: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.ReportPipelineTriggerRequest,
        base.metric.v1alpha.metric_pb2.ReportPipelineTriggerResponse,
    ]
    """Services for reporting usages

    For pipeline-backend clients to report a pipeline trigger record
    """
    ReportPipelineTriggers: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.ReportPipelineTriggersRequest,
        base.metric.v1alpha.metric_pb2.ReportPipelineTriggersResponse,
    ]
    """For pipeline-backend clients to report pipeline trigger records"""
    GetPipelineTriggerRecords: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetPipelineTriggerRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetPipelineTriggerRecordsResponse,
    ]
    """Services for querying usages

    Get pipeline trigger records
    """
    GetBulkPipelineTriggerRecords: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerRecordsResponse,
    ]
    """Get pipeline trigger records in bulk"""
    GetCumulativePipelineTriggerRecords: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetCumulativePipelineTriggerRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetCumulativePipelineTriggerRecordsResponse,
    ]
    """Get cumulative pipeline trigger records"""
    GetBulkCumulativePipelineTriggerRecords: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkCumulativePipelineTriggerRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetBulkCumulativePipelineTriggerRecordsResponse,
    ]
    """Get cumulative pipeline trigger records in bulk"""
    GetPipelineTriggerSummary: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetPipelineTriggerSummaryRequest,
        base.metric.v1alpha.metric_pb2.GetPipelineTriggerSummaryResponse,
    ]
    """Get pipeline trigger summary"""
    GetBulkPipelineTriggerSummaries: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerSummariesRequest,
        base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerSummariesResponse,
    ]
    """Get pipeline trigger summary in bulk"""
    GetPipelineTriggerPrice: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetPipelineTriggerPriceRequest,
        base.metric.v1alpha.metric_pb2.GetPipelineTriggerPriceResponse,
    ]
    """Services for querying prices

    Get pipeline trigger price
    """
    GetBulkPipelineTriggerPrice: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerPriceRequest,
        base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerPriceResponse,
    ]
    """Get pipeline trigger price in bulk"""

class PipelineServiceAsyncStub:
    """Services related to pipeline trigger records
    Service for get pipeline information
    """

    GetPipelines: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetPipelinesRequest,
        base.metric.v1alpha.metric_pb2.GetPipelinesResponse,
    ]
    """Get pipeline info"""
    ReportPipelineTrigger: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.ReportPipelineTriggerRequest,
        base.metric.v1alpha.metric_pb2.ReportPipelineTriggerResponse,
    ]
    """Services for reporting usages

    For pipeline-backend clients to report a pipeline trigger record
    """
    ReportPipelineTriggers: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.ReportPipelineTriggersRequest,
        base.metric.v1alpha.metric_pb2.ReportPipelineTriggersResponse,
    ]
    """For pipeline-backend clients to report pipeline trigger records"""
    GetPipelineTriggerRecords: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetPipelineTriggerRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetPipelineTriggerRecordsResponse,
    ]
    """Services for querying usages

    Get pipeline trigger records
    """
    GetBulkPipelineTriggerRecords: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerRecordsResponse,
    ]
    """Get pipeline trigger records in bulk"""
    GetCumulativePipelineTriggerRecords: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetCumulativePipelineTriggerRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetCumulativePipelineTriggerRecordsResponse,
    ]
    """Get cumulative pipeline trigger records"""
    GetBulkCumulativePipelineTriggerRecords: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkCumulativePipelineTriggerRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetBulkCumulativePipelineTriggerRecordsResponse,
    ]
    """Get cumulative pipeline trigger records in bulk"""
    GetPipelineTriggerSummary: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetPipelineTriggerSummaryRequest,
        base.metric.v1alpha.metric_pb2.GetPipelineTriggerSummaryResponse,
    ]
    """Get pipeline trigger summary"""
    GetBulkPipelineTriggerSummaries: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerSummariesRequest,
        base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerSummariesResponse,
    ]
    """Get pipeline trigger summary in bulk"""
    GetPipelineTriggerPrice: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetPipelineTriggerPriceRequest,
        base.metric.v1alpha.metric_pb2.GetPipelineTriggerPriceResponse,
    ]
    """Services for querying prices

    Get pipeline trigger price
    """
    GetBulkPipelineTriggerPrice: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerPriceRequest,
        base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerPriceResponse,
    ]
    """Get pipeline trigger price in bulk"""

class PipelineServiceServicer(metaclass=abc.ABCMeta):
    """Services related to pipeline trigger records
    Service for get pipeline information
    """

    @abc.abstractmethod
    def GetPipelines(
        self,
        request: base.metric.v1alpha.metric_pb2.GetPipelinesRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetPipelinesResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetPipelinesResponse]]:
        """Get pipeline info"""
    @abc.abstractmethod
    def ReportPipelineTrigger(
        self,
        request: base.metric.v1alpha.metric_pb2.ReportPipelineTriggerRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.ReportPipelineTriggerResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.ReportPipelineTriggerResponse]]:
        """Services for reporting usages

        For pipeline-backend clients to report a pipeline trigger record
        """
    @abc.abstractmethod
    def ReportPipelineTriggers(
        self,
        request: base.metric.v1alpha.metric_pb2.ReportPipelineTriggersRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.ReportPipelineTriggersResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.ReportPipelineTriggersResponse]]:
        """For pipeline-backend clients to report pipeline trigger records"""
    @abc.abstractmethod
    def GetPipelineTriggerRecords(
        self,
        request: base.metric.v1alpha.metric_pb2.GetPipelineTriggerRecordsRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetPipelineTriggerRecordsResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetPipelineTriggerRecordsResponse]]:
        """Services for querying usages

        Get pipeline trigger records
        """
    @abc.abstractmethod
    def GetBulkPipelineTriggerRecords(
        self,
        request: base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerRecordsRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerRecordsResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerRecordsResponse]]:
        """Get pipeline trigger records in bulk"""
    @abc.abstractmethod
    def GetCumulativePipelineTriggerRecords(
        self,
        request: base.metric.v1alpha.metric_pb2.GetCumulativePipelineTriggerRecordsRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetCumulativePipelineTriggerRecordsResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetCumulativePipelineTriggerRecordsResponse]]:
        """Get cumulative pipeline trigger records"""
    @abc.abstractmethod
    def GetBulkCumulativePipelineTriggerRecords(
        self,
        request: base.metric.v1alpha.metric_pb2.GetBulkCumulativePipelineTriggerRecordsRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetBulkCumulativePipelineTriggerRecordsResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetBulkCumulativePipelineTriggerRecordsResponse]]:
        """Get cumulative pipeline trigger records in bulk"""
    @abc.abstractmethod
    def GetPipelineTriggerSummary(
        self,
        request: base.metric.v1alpha.metric_pb2.GetPipelineTriggerSummaryRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetPipelineTriggerSummaryResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetPipelineTriggerSummaryResponse]]:
        """Get pipeline trigger summary"""
    @abc.abstractmethod
    def GetBulkPipelineTriggerSummaries(
        self,
        request: base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerSummariesRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerSummariesResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerSummariesResponse]]:
        """Get pipeline trigger summary in bulk"""
    @abc.abstractmethod
    def GetPipelineTriggerPrice(
        self,
        request: base.metric.v1alpha.metric_pb2.GetPipelineTriggerPriceRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetPipelineTriggerPriceResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetPipelineTriggerPriceResponse]]:
        """Services for querying prices

        Get pipeline trigger price
        """
    @abc.abstractmethod
    def GetBulkPipelineTriggerPrice(
        self,
        request: base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerPriceRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerPriceResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetBulkPipelineTriggerPriceResponse]]:
        """Get pipeline trigger price in bulk"""

def add_PipelineServiceServicer_to_server(servicer: PipelineServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

class ModelServiceStub:
    """Services related to model online records
    Service for get model information
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetModels: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetModelsRequest,
        base.metric.v1alpha.metric_pb2.GetModelsResponse,
    ]
    """Get Model info"""
    ReportModelOnline: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.ReportModelOnlineRequest,
        base.metric.v1alpha.metric_pb2.ReportModelOnlineResponse,
    ]
    """Services for reporting usages

    For model-backend clients to report a model online record
    """
    ReportModelOnlines: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.ReportModelOnlinesRequest,
        base.metric.v1alpha.metric_pb2.ReportModelOnlinesResponse,
    ]
    """For model-backend clients to report moel online records"""
    GetModelOnlineRecords: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetModelOnlineRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetModelOnlineRecordsResponse,
    ]
    """Services for querying usages

    Get model online records
    """
    GetBulkModelOnlineRecords: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkModelOnlineRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetBulkModelOnlineRecordsResponse,
    ]
    """Get model online records in bulk"""
    GetCumulativeModelOnlineRecords: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetCumulativeModelOnlineRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetCumulativeModelOnlineRecordsResponse,
    ]
    """Get cumulative model online records"""
    GetBulkCumulativeModelOnlineRecords: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkCumulativeModelOnlineRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetBulkCumulativeModelOnlineRecordsResponse,
    ]
    """Get cumulative model online records in bulk"""
    GetModelOnlineSummary: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetModelOnlineSummaryRequest,
        base.metric.v1alpha.metric_pb2.GetModelOnlineSummaryResponse,
    ]
    """Get model online summary"""
    GetBulkModelOnlineSummary: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkModelOnlineSummaryRequest,
        base.metric.v1alpha.metric_pb2.GetBulkModelOnlineSummaryResponse,
    ]
    """Get model online summary in bulk"""
    GetModelOnlinePrice: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetModelOnlinePriceRequest,
        base.metric.v1alpha.metric_pb2.GetModelOnlinePriceResponse,
    ]
    """Services for querying prices

    Get model online price
    """
    GetBulkModelOnlinePrice: grpc.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkModelOnlinePriceRequest,
        base.metric.v1alpha.metric_pb2.GetBulkModelOnlinePriceResponse,
    ]
    """Get model online price in bulk"""

class ModelServiceAsyncStub:
    """Services related to model online records
    Service for get model information
    """

    GetModels: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetModelsRequest,
        base.metric.v1alpha.metric_pb2.GetModelsResponse,
    ]
    """Get Model info"""
    ReportModelOnline: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.ReportModelOnlineRequest,
        base.metric.v1alpha.metric_pb2.ReportModelOnlineResponse,
    ]
    """Services for reporting usages

    For model-backend clients to report a model online record
    """
    ReportModelOnlines: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.ReportModelOnlinesRequest,
        base.metric.v1alpha.metric_pb2.ReportModelOnlinesResponse,
    ]
    """For model-backend clients to report moel online records"""
    GetModelOnlineRecords: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetModelOnlineRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetModelOnlineRecordsResponse,
    ]
    """Services for querying usages

    Get model online records
    """
    GetBulkModelOnlineRecords: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkModelOnlineRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetBulkModelOnlineRecordsResponse,
    ]
    """Get model online records in bulk"""
    GetCumulativeModelOnlineRecords: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetCumulativeModelOnlineRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetCumulativeModelOnlineRecordsResponse,
    ]
    """Get cumulative model online records"""
    GetBulkCumulativeModelOnlineRecords: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkCumulativeModelOnlineRecordsRequest,
        base.metric.v1alpha.metric_pb2.GetBulkCumulativeModelOnlineRecordsResponse,
    ]
    """Get cumulative model online records in bulk"""
    GetModelOnlineSummary: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetModelOnlineSummaryRequest,
        base.metric.v1alpha.metric_pb2.GetModelOnlineSummaryResponse,
    ]
    """Get model online summary"""
    GetBulkModelOnlineSummary: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkModelOnlineSummaryRequest,
        base.metric.v1alpha.metric_pb2.GetBulkModelOnlineSummaryResponse,
    ]
    """Get model online summary in bulk"""
    GetModelOnlinePrice: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetModelOnlinePriceRequest,
        base.metric.v1alpha.metric_pb2.GetModelOnlinePriceResponse,
    ]
    """Services for querying prices

    Get model online price
    """
    GetBulkModelOnlinePrice: grpc.aio.UnaryUnaryMultiCallable[
        base.metric.v1alpha.metric_pb2.GetBulkModelOnlinePriceRequest,
        base.metric.v1alpha.metric_pb2.GetBulkModelOnlinePriceResponse,
    ]
    """Get model online price in bulk"""

class ModelServiceServicer(metaclass=abc.ABCMeta):
    """Services related to model online records
    Service for get model information
    """

    @abc.abstractmethod
    def GetModels(
        self,
        request: base.metric.v1alpha.metric_pb2.GetModelsRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetModelsResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetModelsResponse]]:
        """Get Model info"""
    @abc.abstractmethod
    def ReportModelOnline(
        self,
        request: base.metric.v1alpha.metric_pb2.ReportModelOnlineRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.ReportModelOnlineResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.ReportModelOnlineResponse]]:
        """Services for reporting usages

        For model-backend clients to report a model online record
        """
    @abc.abstractmethod
    def ReportModelOnlines(
        self,
        request: base.metric.v1alpha.metric_pb2.ReportModelOnlinesRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.ReportModelOnlinesResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.ReportModelOnlinesResponse]]:
        """For model-backend clients to report moel online records"""
    @abc.abstractmethod
    def GetModelOnlineRecords(
        self,
        request: base.metric.v1alpha.metric_pb2.GetModelOnlineRecordsRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetModelOnlineRecordsResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetModelOnlineRecordsResponse]]:
        """Services for querying usages

        Get model online records
        """
    @abc.abstractmethod
    def GetBulkModelOnlineRecords(
        self,
        request: base.metric.v1alpha.metric_pb2.GetBulkModelOnlineRecordsRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetBulkModelOnlineRecordsResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetBulkModelOnlineRecordsResponse]]:
        """Get model online records in bulk"""
    @abc.abstractmethod
    def GetCumulativeModelOnlineRecords(
        self,
        request: base.metric.v1alpha.metric_pb2.GetCumulativeModelOnlineRecordsRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetCumulativeModelOnlineRecordsResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetCumulativeModelOnlineRecordsResponse]]:
        """Get cumulative model online records"""
    @abc.abstractmethod
    def GetBulkCumulativeModelOnlineRecords(
        self,
        request: base.metric.v1alpha.metric_pb2.GetBulkCumulativeModelOnlineRecordsRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetBulkCumulativeModelOnlineRecordsResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetBulkCumulativeModelOnlineRecordsResponse]]:
        """Get cumulative model online records in bulk"""
    @abc.abstractmethod
    def GetModelOnlineSummary(
        self,
        request: base.metric.v1alpha.metric_pb2.GetModelOnlineSummaryRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetModelOnlineSummaryResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetModelOnlineSummaryResponse]]:
        """Get model online summary"""
    @abc.abstractmethod
    def GetBulkModelOnlineSummary(
        self,
        request: base.metric.v1alpha.metric_pb2.GetBulkModelOnlineSummaryRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetBulkModelOnlineSummaryResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetBulkModelOnlineSummaryResponse]]:
        """Get model online summary in bulk"""
    @abc.abstractmethod
    def GetModelOnlinePrice(
        self,
        request: base.metric.v1alpha.metric_pb2.GetModelOnlinePriceRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetModelOnlinePriceResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetModelOnlinePriceResponse]]:
        """Services for querying prices

        Get model online price
        """
    @abc.abstractmethod
    def GetBulkModelOnlinePrice(
        self,
        request: base.metric.v1alpha.metric_pb2.GetBulkModelOnlinePriceRequest,
        context: _ServicerContext,
    ) -> typing.Union[base.metric.v1alpha.metric_pb2.GetBulkModelOnlinePriceResponse, collections.abc.Awaitable[base.metric.v1alpha.metric_pb2.GetBulkModelOnlinePriceResponse]]:
        """Get model online price in bulk"""

def add_ModelServiceServicer_to_server(servicer: ModelServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
